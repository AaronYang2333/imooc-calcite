欢迎大家来到 《Apache Calcite SQL高级特性》 这门课程
我是本次课程的讲师Aaron


前面介绍了什么是Apache Calcite 以及为什么要学习Calcite， 说了很多Apache Calcite的一些特点。
但还是缺少一些直观的印象。那我们这节课通过三个代码示例，

对Apache Calcite的三个主要特点
（“Standard SQL”标准SQL解析器，“Query Optimization” 查询优化器， 以及 “Any data, anywhere” 联邦查询的特性） 进行代码的演示。



很多同学甚至不知道Calcite， 但其实每天都在跟它打交道，因为很多大数据组件的核心都是calcite,

======
首先，我们打开Apache Calcite的官网，（https://calcite.apache.org/）会看到，首页标题 “下一代高性能数据库底座”，那也就意味着 我们使用calcite
是有可能构建一个数据库引擎。事实上，也确实可以。
比如，如果有构建数据分析平台这样的需求，那calcite就是最合适的选择。

接着下面还列了它的三个主要特点：“Standard SQL”标准SQL解析器，“Query Optimization” 查询优化器， 以及 “Any data, anywhere” 支持联邦查询的特性，

=====
标准SQL解析器：是说calcite可以想其他SQL解析器一样完成词法分析，语法分析，解析生成一个抽象语法树AST，为之后的剪枝或者优化做准备。

那这样的AST并不是最优解，还有优化的空间，那就需要另外一个特点 查询优化器。
====

查询优化器，查询优化器是Calcite的主要功能，通过将抽象语法树转成关系代数，并通过优化模型，完成像 列裁剪，谓词下推，投影消除这样蔡卓宜

生成最佳的逻辑执行计划。

 calcite 有两种优化模型， 一种是大家都有的基于规则的优化器RBO(Rule Based Optimizer)， 另一个是CBO(Cost Based Optimizer) 基于代价的优化器

RBO使用关系代数的一些等价转换规则，反复地对查询树进行尝试性转换，将原始的语法树转換成“优化”的形式，最终加速整个查询的执行，减少查询的执行时间。
因此，RBO的规则设定就很重要了，规则设定的不好，那最终产生的执行计划是否最优解，就很难保证了

CBO 则是将关系代数中的每一种操作都抽象成一个运算符，预估每个运算符需要的时间和代价，进行优化。而代价和时间的计算 依赖于表中数据，
摆脱了RBO依赖专家系统的弊端，已经成为主流数据库厂商的选择。

https://cloud.tencent.com/developer/article/1559449

Calcite 默认会使用CBO，并且由于Calcite良好的模块化设计，我们可以自定义自己的优化器，添加自定义的优化规则，对SQL查询进行优化。


我们会真正认识到 像 列裁剪，谓词下推，投影消除这样 SQL优化的底层原理。
======

联邦查询，是说calcite可以连接各类数据源，完成不同数据元之间的联合查询。

因为现在的企业内部一般都有多个系统用于数据存储和数据处理。
这些不同的系统各自服务于不同的应用场景或案例。除了传统的RDBMS如Oracle DB，Teradata或PostgreSQL之外，
团队可能还使用了Apache Kafka用作流式处理，使用Apache Druid来保存时序数据，
使用Apache Phoenix进行快速索引查找。此外，他们可能还使用了云存储服务或HDFS来批量存储数据。
平台的团队一般会并行的部署所有这些系统，方便开发人员可以灵活的选择这些工具来满足不同的业务分析需求。

如何设计一种统一的处理方式去，处理分析数据，就是联邦查询关心的问题。

对大数据有些了解的同学，就知道像Hive，Flink之类的大数据组件都是已经可以做到这样的能力，但可能不知道的是 这些组件的背后都是Calcite的支持，
只是在Calcite上包了一层不同的外衣，分别在上面各个特点中增加自定义了一些功能，就称为现在被广泛使用的高分开源项目。

那我们这次就直接抛弃纷繁杂乱的细枝末节，直奔核心，去看看他们到底是怎么实现以上的功能的。
========
那我们之前提到的例子中，可以看到，这条SQL语句时将musql中的user表， 和 csv本地文件做一个join

所以，如果对上面的特性感兴趣，或者在工作上有相关的需求，那学习这门课程，了解Calcite 还是很有必要的。


Apache Calcite 不仅仅是自身很强，在SQL方面具有全方位的能力，他也收到其他社区和公司的关注，到目前为止它已经广泛适用在各大开源或者企业软件中，
例如阿里的MaxCompute, 腾讯TBDS， Flink Hive, 预计算框架Kylin等等

他们（https://calcite.apache.org/docs/powered_by.html） 都使用Calcite 作为自己SQL解析的核心组件。

了解常见开源库的核心代码， 这也是 我们学习Calcite的另一个原因。
https://github.com/apache/flink
https://github.com/search?q=repo%3Aapache%2Fflink%20calcite&type=code

https://github.com/apache/hive
https://github.com/search?q=repo%3Aapache%2Fhive%20calcite&type=code

那在这次课程中呢，我们会学到那些内容呢？
第一，通过源码的方式分析掌握calcite的主要概念和关键特性， 通过这期的课呢，大家就能把Apache calcite的主要功能和整体脉络和原理掌握清楚了。
第二，了解关系代数转换操作，以及逻辑计划优化， 以及利用calcite的主要特点，完成一些自定义扩展需求，（SQL优化，联邦查询，自定义schmea）。
这些特性可以用来完成工作中遇到的一些问题，这些点可能比较深入，暂时用不到，
但是通过这个课程大概能有个了解也是好的。 然后通过手把手自定义一个schema完成minio对象存储的关联查询。
第三， 通过Apache calcite掌握SQL优化流程和高频面试题。 在之后工作，晋升，增加更多的底气和核心竞争力。



所需的课程基础

java，SQL, gradle, 数据库，jdbc, 关系代数


（并使用关系代数的一些等价转换规则，反复地对查询树进行尝试性转换，将原始的语法树转換成“优化”的形式
https://blog.csdn.net/qq_38258510/article/details/105974908）